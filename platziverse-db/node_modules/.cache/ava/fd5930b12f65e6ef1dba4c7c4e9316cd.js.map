{"version":3,"sources":["tests/metric-test.js"],"names":["test","require","proxyquire","sinon","sandbox","db","uuidArgs","metricFixtures","config","logging","metricStub","singleMetric","Object","assign","single","beforeEach","createSandbox","belongsTo","spy","findByAgentUuid","stub","withArgs","returns","Promise","resolve","findByTypeAgentUuid","setupDB","afterEach","restore","t","truthy","Metric"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAIG,OAAO,GAAG,IAAd;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,QAAQ,GAAG,KAAf;;AAEA,MAAMC,cAAc,GAAGN,OAAO,CAAC,mBAAD,CAA9B;;AAEA,IAAIO,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAY,CAAE;AADZ,CAAb;AAIA,IAAIC,UAAU,GAAG,IAAjB;AAEA,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,cAAc,CAACO,MAAjC,CAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAd,IAAI,CAACe,UAAL,CAAgB,YAAY;AAC1BX,EAAAA,OAAO,GAAGD,KAAK,CAACa,aAAN,EAAV;AACAN,EAAAA,UAAU,GAAG;AACXO,IAAAA,SAAS,EAAEd,KAAK,CAACe,GAAN;AADA,GAAb;AAIAR,EAAAA,UAAU,CAACS,eAAX,GAA6Bf,OAAO,CAACgB,IAAR,EAA7B;AACAV,EAAAA,UAAU,CAACS,eAAX,CACGE,QADH,CACYf,QADZ,EAEGgB,OAFH,CAEWC,OAAO,CAACC,OAAR,CAAgBjB,cAAc,CAACkB,mBAAf,CAAmCd,YAAnC,CAAhB,CAFX;AAIA,QAAMe,OAAO,GAAGxB,UAAU,CAAC,KAAD,EAAQ;AAChC,uBAAmB,MAAMQ;AADO,GAAR,CAA1B;AAGAL,EAAAA,EAAE,GAAG,MAAMqB,OAAO,CAAClB,MAAD,CAAlB;AACD,CAfD;AAiBAR,IAAI,CAAC2B,SAAL,CAAe,MAAM;AACnBxB,EAAAA,KAAK,CAACyB,OAAN;AACD,CAFD;AAIA5B,IAAI,CAAC,QAAD,EAAW6B,CAAC,IAAI;AAClBA,EAAAA,CAAC,CAACC,MAAF,CAASzB,EAAE,CAAC0B,MAAZ,EAAoB,4BAApB;AACD,CAFG,CAAJ,C,CAGA;AACA;AACA","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\n\nlet sandbox = null\nlet db = null\nlet uuidArgs = 'xxx'\n\nconst metricFixtures = require('./fixtures/metric')\n\nlet config = {\n  logging: function () {}\n}\n\nlet metricStub = null\n\nconst singleMetric = Object.assign({}, metricFixtures.single)\n\n// const newMetric = {\n//   id: 1,\n//   type: \"memory\",\n//   value: \"705\",\n//   uuid: \"xxx\",\n//   createdAt: new Date(),\n//   updatedAt: new Date()\n// };\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  metricStub = {\n    belongsTo: sinon.spy()\n  }\n\n  metricStub.findByAgentUuid = sandbox.stub()\n  metricStub.findByAgentUuid\n    .withArgs(uuidArgs)\n    .returns(Promise.resolve(metricFixtures.findByTypeAgentUuid(singleMetric)))\n\n  const setupDB = proxyquire('../', {\n    './models/metric': () => metricStub\n  })\n  db = await setupDB(config)\n})\n\ntest.afterEach(() => {\n  sinon.restore()\n})\n\ntest('Metric', t => {\n  t.truthy(db.Metric, 'Agent service should exist')\n})\n// test.serial(\"Metric#findByAgentUuid\", async t => {\n//   t.true(metricStub.findByAgentUuid.called, \"FindByAgentUuid should be called\");\n// });\n"]}