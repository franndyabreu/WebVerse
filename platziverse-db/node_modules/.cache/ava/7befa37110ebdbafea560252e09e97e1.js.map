{"version":3,"sources":["tests/metric-test.js"],"names":["test","require","proxyquire","sinon","metricFixtures","singleMetric","Object","assign","single","type","uuidArgs","uuid","responseUuid","findByAgentUuid","typeAgentResponse","findByTypeAgentUuid","sandbox","db","AgentStub","hasMany","spy","findByAgentUuidArgs","attributes","group","include","model","where","raw","typeAgentUuidArgs","limit","order","config","logging","MetricStub","beforeEach","createSandbox","belongsTo","findAll","stub","withArgs","returns","Promise","resolve","all","setupDB","afterEach","restore","t","truthy","Metric","serial","metric","deepEqual","console","log"],"mappings":"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","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\nconst metricFixtures = require(\"./fixtures/metric\");\nconst singleMetric = Object.assign({}, metricFixtures.single);\nconst type = \"cpu\";\nlet uuidArgs = singleMetric.uuid;\n\nconst responseUuid = metricFixtures.findByAgentUuid(metricFixtures.single.uuid);\nconst typeAgentResponse = metricFixtures.findByTypeAgentUuid(type, uuidArgs);\n\nlet sandbox = null;\nlet db = null;\n\nlet AgentStub = {\n  hasMany: sinon.spy()\n};\n\nconst findByAgentUuidArgs = {\n  attributes: [\"type\"],\n  group: [\"type\"],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: uuidArgs\n      }\n    }\n  ],\n  raw: true\n};\n\nconst typeAgentUuidArgs = {\n  attributes: [\"id\", \"type\", \"value\", \"createdAt\"],\n  where: {\n    type\n  },\n  limit: 20,\n  order: [[\"createdAt\", \"DESC\"]],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: uuidArgs\n      }\n    }\n  ],\n  raw: true\n};\n\nlet config = {\n  logging: function() {}\n};\n\nlet MetricStub = null;\n\n// const newMetric = {\n//   id: 1,\n//   type: \"memory\",\n//   value: \"705\",\n//   uuid: \"xxx\",\n//   createdAt: new Date(),\n//   updatedAt: new Date()\n// };\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  MetricStub = {\n    belongsTo: sinon.spy(),\n    findAll: sinon.stub()\n  };\n\n  //Model findByTypeAgentUuid\n  MetricStub.findByTypeAgentUuid = sandbox.stub();\n  MetricStub.findByTypeAgentUuid\n    .withArgs(typeAgentUuidArgs)\n    .returns(\n      Promise.resolve(metricFixtures.findByTypeAgentUuid(type, uuidArgs))\n    );\n\n  //Modell findByAgentUuid stub\n  MetricStub.findByAgentUuid = sandbox.stub();\n  MetricStub.findByAgentUuid\n    .withArgs(findByAgentUuidArgs)\n    .returns(Promise.resolve(metricFixtures.findByAgentUuid(uuidArgs)));\n\n  // Model findAll Stub\n  MetricStub.findAll = sandbox.stub();\n  MetricStub.findAll.withArgs().returns(Promise.resolve(metricFixtures.all));\n  MetricStub.findAll\n    .withArgs(findByAgentUuidArgs)\n    .returns(Promise.resolve(responseUuid));\n  MetricStub.findAll\n    .withArgs(typeAgentUuidArgs)\n    .returns(Promise.resolve(typeAgentResponse));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/agent\": () => AgentStub,\n    \"./models/metric\": () => MetricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest(\"Metric\", t => {\n  t.truthy(db.Metric, \"Metric service should exist\");\n});\ntest.serial(\"Metric#findByUuid\", async t => {\n  let metric = await db.Metric.findByAgentUuid(uuidArgs);\n\n  t.deepEqual(\n    metric,\n    metricFixtures.findByAgentUuid(uuidArgs),\n    \"Should be the same.\"\n  );\n  //   t.true(MetricStub.findByAgentUuid.called, \"FindByAgentUuid should be called\");\n});\n\ntest.serial(\"Metric#FindByTypeAgentUuid\", async t => {\n  let metric = await db.Metric.findByTypeAgentUuid(type, uuidArgs);\n  console.log(metricFixtures.findByTypeAgentUuid(type, uuidArgs));\n\n  t.deepEqual(metric, metricFixtures.findByTypeAgentUuid(type, uuidArgs));\n});\n"]}