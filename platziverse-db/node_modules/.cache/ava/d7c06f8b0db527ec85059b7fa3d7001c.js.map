{"version":3,"sources":["tests/metric-test.js"],"names":["test","require","proxyquire","sinon","metricFixtures","agentFixtures","type","agentUUID","responseUuid","findByAgentUuid","typeAgentResponse","findByTypeAgentUuid","sandbox","db","AgentStub","findByAgentUuidArgs","attributes","group","include","model","where","uuid","raw","typeAgentUuidArgs","limit","order","config","logging","MetricStub","metricUuidArgs","newMetric","id","value","createdAt","Date","updatedAt","beforeEach","createSandbox","belongsTo","spy","hasMany","findOne","stub","withArgs","returns","Promise","resolve","findByUuid","create","toJSON","findAll","all","setupDB","afterEach","restore","serial","t","true","called","calledOnce","calledWith","truthy","Metric","metric","console","log","deepEqual"],"mappings":"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","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\nconst metricFixtures = require(\"./fixtures/metric\");\nconst agentFixtures = require(\"./fixtures/agent\");\n\nconst type = \"cpu\";\nlet agentUUID = \"yyy-yyy-yyy\";\n\nconst responseUuid = metricFixtures.findByAgentUuid(agentUUID);\nconst typeAgentResponse = metricFixtures.findByTypeAgentUuid(type, agentUUID);\nlet sandbox = null;\nlet db = null;\n\nlet AgentStub = null;\n\nconst findByAgentUuidArgs = {\n  attributes: [\"type\"],\n  group: [\"type\"],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: agentUUID\n      }\n    }\n  ],\n  raw: true\n};\n\nconst typeAgentUuidArgs = {\n  attributes: [\"id\", \"type\", \"value\", \"createdAt\"],\n  where: {\n    type\n  },\n  limit: 20,\n  order: [[\"createdAt\", \"DESC\"]],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: agentUUID\n      }\n    }\n  ],\n  raw: true\n};\n\nlet config = {\n  logging: function() {}\n};\n\nlet MetricStub = null;\n\nlet metricUuidArgs = {\n  attributes: [\"type\"],\n  group: [\"type\"],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: agentUUID\n      }\n    }\n  ],\n  raw: true\n};\nconst newMetric = {\n  id: 1,\n  type: \"memory\",\n  value: \"705\",\n  createdAt: new Date(),\n  updatedAt: new Date()\n};\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  MetricStub = {\n    belongsTo: sandbox.spy()\n  };\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  };\n\n  //Model findOne stub Agent\n\n  AgentStub.findOne = sandbox.stub();\n  AgentStub.findOne\n    .withArgs({ where: { uuid: agentUUID } })\n    .returns(Promise.resolve(agentFixtures.findByUuid(agentUUID)));\n  //Model CreateMetric stub\n  MetricStub.create = sandbox.stub();\n  MetricStub.create.withArgs(newMetric).returns(\n    Promise.resolve({\n      toJSON() {\n        return newMetric;\n      }\n    })\n  );\n\n  //Model findByTypeAgentUuid stub\n  MetricStub.findByTypeAgentUuid = sandbox.stub();\n  MetricStub.findByTypeAgentUuid\n    .withArgs(typeAgentUuidArgs)\n    .returns(\n      Promise.resolve(metricFixtures.findByTypeAgentUuid(type, agentUUID))\n    );\n\n  //Modell findByAgentUuid stub\n  MetricStub.findByAgentUuid = sandbox.stub();\n  MetricStub.findByAgentUuid\n    .withArgs(agentUUID)\n    .returns(Promise.resolve(metricFixtures.findByAgentUuid(agentUUID)));\n\n  // Model findAll Stub\n  MetricStub.findAll = sandbox.stub();\n  MetricStub.findAll.withArgs().returns(Promise.resolve(metricFixtures.all));\n  MetricStub.findAll\n    .withArgs(findByAgentUuidArgs)\n    .returns(Promise.resolve(responseUuid));\n  MetricStub.findAll\n    .withArgs(typeAgentUuidArgs)\n    .returns(Promise.resolve(typeAgentResponse));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/agent\": () => AgentStub,\n    \"./models/metric\": () => MetricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest.serial(\"Setup#Metric\", t => {\n  t.true(AgentStub.hasMany.called, \"Should be called\");\n  t.true(MetricStub.belongsTo.called, \"Should be called\");\n  t.true(AgentStub.hasMany.calledOnce, \"Should be called once\");\n  t.true(MetricStub.belongsTo.calledOnce, \"Should be called once\");\n  t.true(\n    AgentStub.hasMany.calledWith(MetricStub),\n    \"Should be called with MetricModel\"\n  );\n  t.true(\n    MetricStub.belongsTo.calledWith(AgentStub),\n    \"Should be called with AgentModel\"\n  );\n});\n\ntest(\"Metric\", t => {\n  t.truthy(db.Metric, \"Metric service should exist\");\n});\n\ntest.serial(\"Metric#create -existing\", async t => {\n  let metric = await db.Metric.create(agentUUID, newMetric);\n  console.log(await db.Metric.findByAgentUuid(agentUUID));\n  // console.log(metricFixtures.findByAgentUuid(agentUUID));\n  t.true(AgentStub.findOne.called, \"FindOne called\");\n  t.true(MetricStub.create.called, \"Should be called\");\n  t.true(MetricStub.create.calledOnce, \"Should be called once\");\n  t.true(\n    MetricStub.create.calledWith(newMetric),\n    \"Should be called with new metric\"\n  );\n  t.deepEqual(metric, newMetric, \"Response and single should be the same\");\n\n  // t.true(\n  //   AgentStub.findOne.calledWith(uuidArgs),\n  //   \"FindOne called with specified args\"\n  // );\n});\n// test.serial(\"Metric#findByUuid\", async t => {\n//   let metric = await db.Metric.findByAgentUuid(agentUUID);\n//   t.true(MetricStub.findAll.called, \"findAll called\");\n//   t.true(MetricStub.findAll.calledOnce, \"findAll called Once\");\n//   // t.true(MetricStub.findByAgentUuid.called, \"FindbyAgentUuid should be called\");\n//   // t.true(\n//   //   MetricStub.findByAgentUuid.calledOnce,\n//   //   \"findByAgentUuid should be called Once\"\n//   // );\n//   // t.true(\n//   //   MetricStub.findByAgentUuid.calledWith(uuidArgs),\n//   //   \"findByAgentUuid should be called with specified params\"\n//   // );\n\n//   t.deepEqual(\n//     metric,\n//     metricFixtures.findByAgentUuid(agentUUID),\n//     \"Should be the same.\"\n//   );\n//   //   t.true(MetricStub.findByAgentUuid.called, \"FindByAgentUuid should be called\");\n// });\n\n// test.serial(\"Metric#FindByTypeAgentUuid\", async t => {\n//   let metric = await db.Metric.findByTypeAgentUuid(type, agentUUID);\n//   t.true(MetricStub.findAll.called, \"findAll called\");\n//   t.true(MetricStub.findAll.calledOnce, \"findAll called Once\");\n\n//   t.deepEqual(metric, metricFixtures.findByTypeAgentUuid(type, agentUUID));\n// });\n"]}