{"version":3,"sources":["tests/metric-test.js"],"names":["test","require","proxyquire","sinon","sandbox","db","uuidArgs","metricFixtures","config","logging","metricStub","agentStub","belongsTo","spy","singleMetric","Object","assign","single","beforeEach","createSandbox","findByAgentUuid","stub","withArgs","returns","Promise","resolve","findByTypeAgentUuid","setupDB","afterEach","restore","t","truthy","Metric"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAIG,OAAO,GAAG,IAAd;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,QAAQ,GAAG,KAAf;;AAEA,MAAMC,cAAc,GAAGN,OAAO,CAAC,mBAAD,CAA9B;;AAEA,IAAIO,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAW,CAAE;AADX,CAAb;AAIA,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,SAAS,GAAG;AACdC,EAAAA,SAAS,EAAET,KAAK,CAACU,GAAN;AADG,CAAhB;AAIA,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,cAAc,CAACU,MAAjC,CAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAjB,IAAI,CAACkB,UAAL,CAAgB,YAAY;AAC1Bd,EAAAA,OAAO,GAAGD,KAAK,CAACgB,aAAN,EAAV;AACAT,EAAAA,UAAU,GAAG;AACXE,IAAAA,SAAS,EAAET,KAAK,CAACU,GAAN;AADA,GAAb;AAIAH,EAAAA,UAAU,CAACU,eAAX,GAA6BhB,OAAO,CAACiB,IAAR,EAA7B;AACAX,EAAAA,UAAU,CAACU,eAAX,CACGE,QADH,CACYhB,QADZ,EAEGiB,OAFH,CAEWC,OAAO,CAACC,OAAR,CAAgBlB,cAAc,CAACmB,mBAAf,CAAmCZ,YAAnC,CAAhB,CAFX;AAIA,QAAMa,OAAO,GAAGzB,UAAU,CAAC,KAAD,EAAQ;AAChC,uBAAmB,MAAMQ,UADO;AAEhC,sBAAkB,MAAMC;AAFQ,GAAR,CAA1B;AAIAN,EAAAA,EAAE,GAAG,MAAMsB,OAAO,CAACnB,MAAD,CAAlB;AACD,CAhBD;AAkBAR,IAAI,CAAC4B,SAAL,CAAe,MAAM;AACnBzB,EAAAA,KAAK,CAAC0B,OAAN;AACD,CAFD;AAIA7B,IAAI,CAAC,QAAD,EAAW8B,CAAC,IAAI;AAClBA,EAAAA,CAAC,CAACC,MAAF,CAAS1B,EAAE,CAAC2B,MAAZ,EAAoB,6BAApB;AACD,CAFG,CAAJ,C,CAGA;AACA;AACA","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\n\nlet sandbox = null;\nlet db = null;\nlet uuidArgs = \"xxx\";\n\nconst metricFixtures = require(\"./fixtures/metric\");\n\nlet config = {\n  logging: function() {}\n};\n\nlet metricStub = null;\nlet agentStub = {\n  belongsTo: sinon.spy()\n};\n\nconst singleMetric = Object.assign({}, metricFixtures.single);\n\n// const newMetric = {\n//   id: 1,\n//   type: \"memory\",\n//   value: \"705\",\n//   uuid: \"xxx\",\n//   createdAt: new Date(),\n//   updatedAt: new Date()\n// };\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  metricStub = {\n    belongsTo: sinon.spy()\n  };\n\n  metricStub.findByAgentUuid = sandbox.stub();\n  metricStub.findByAgentUuid\n    .withArgs(uuidArgs)\n    .returns(Promise.resolve(metricFixtures.findByTypeAgentUuid(singleMetric)));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/metric\": () => metricStub,\n    \"./models/agent\": () => agentStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest(\"Metric\", t => {\n  t.truthy(db.Metric, \"Metric service should exist\");\n});\n// test.serial(\"Metric#findByAgentUuid\", async t => {\n//   t.true(metricStub.findByAgentUuid.called, \"FindByAgentUuid should be called\");\n// });\n"]}