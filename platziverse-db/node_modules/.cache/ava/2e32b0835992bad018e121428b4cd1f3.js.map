{"version":3,"sources":["tests/agent-test.js"],"names":["test","require","proxyquire","sinon","db","id","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","AgentStub","beforeEach","sandbox","createSandbox","hasMany","setupDB","afterEach","restore","t","truthy","Agent","serial","ß","true","called","agent","findById","deepEqual"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIG,EAAE,GAAG,IAAT;AACA,IAAIC,EAAE,GAAG,CAAT;;AAEA,MAAMC,aAAa,GAAGL,OAAO,CAAC,kBAAD,CAA7B;;AAEA,IAAIM,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAW,CAAE;AADX,CAAb;AAIA,IAAIC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAAEP,KAAK,CAACQ,GAAN;AADI,CAAjB;AAIA,IAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,aAAa,CAACM,MAAhC,CAAb;AACA,IAAIG,SAAS,GAAG,IAAhB;AAEAf,IAAI,CAACgB,UAAL,CAAgB,YAAY;AAC1BC,EAAAA,OAAO,GAAGd,KAAK,CAACe,aAAN,EAAV;AACAH,EAAAA,SAAS,GAAG;AACVI,IAAAA,OAAO,EAAEhB,KAAK,CAACQ,GAAN;AADC,GAAZ;AAIA,QAAMS,OAAO,GAAGlB,UAAU,CAAC,KAAD,EAAQ;AAChC,sBAAkB,MAAMa,SADQ;AAEhC,uBAAmB,MAAMN;AAFO,GAAR,CAA1B;AAIAL,EAAAA,EAAE,GAAG,MAAMgB,OAAO,CAACb,MAAD,CAAlB;AACD,CAXD;AAaAP,IAAI,CAACqB,SAAL,CAAe,MAAM;AACnBlB,EAAAA,KAAK,CAACmB,OAAN;AACD,CAFD;AAIAtB,IAAI,CAAC,OAAD,EAAUuB,CAAC,IAAI;AACjBA,EAAAA,CAAC,CAACC,MAAF,CAASpB,EAAE,CAACqB,KAAZ,EAAmB,4BAAnB;AACD,CAFG,CAAJ;AAIAzB,IAAI,CAAC0B,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AACxBI,EAAAA,CAAC;AACDJ,EAAAA,CAAC,CAACK,IAAF,CAAOb,SAAS,CAACI,OAAV,CAAkBU,MAAzB,EAAiC,gCAAjC;AACAN,EAAAA,CAAC,CAACK,IAAF,CAAOnB,UAAU,CAACC,SAAX,CAAqBmB,MAA5B,EAAoC,mCAApC;AACD,CAJD;AAMA7B,IAAI,CAAC0B,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AACvC,MAAIO,KAAK,GAAG,MAAM1B,EAAE,CAACqB,KAAH,CAASM,QAAT,CAAkB1B,EAAlB,CAAlB;AAEAkB,EAAAA,CAAC,CAACS,SAAF,CAAYF,KAAZ,EAAmBxB,aAAa,CAACyB,QAAd,CAAuB1B,EAAvB,CAAnB,EAA+C,qBAA/C;AACD,CAJD","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\nlet db = null;\nlet id = 1;\n\nconst agentFixtures = require(\"./fixtures/agent\");\n\nlet config = {\n  logging: function() {}\n};\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n};\n\nlet single = Object.assign({}, agentFixtures.single);\nlet AgentStub = null;\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  AgentStub = {\n    hasMany: sinon.spy()\n  };\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/agent\": () => AgentStub,\n    \"./models/metric\": () => MetricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest(\"Agent\", t => {\n  t.truthy(db.Agent, \"Agent service should exist\");\n});\n\ntest.serial(\"Setup\", t => {\n  ß;\n  t.true(AgentStub.hasMany.called, \"AgentMode.hasMany was executed\");\n  t.true(MetricStub.belongsTo.called, \"MetricStub.belongsTo was executed\");\n});\n\ntest.serial(\"Agent#findById\", async t => {\n  let agent = await db.Agent.findById(id);\n\n  t.deepEqual(agent, agentFixtures.findById(id), \"Should be the same.\");\n});\n"]}