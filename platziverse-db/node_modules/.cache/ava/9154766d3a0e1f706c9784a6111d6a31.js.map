{"version":3,"sources":["tests/agent-test.js"],"names":["test","require","proxyquire","sinon","sandbox","db","id","uuid","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","connectedArgs","where","connected","usernameArgs","username","uuidArgs","newAgent","name","hostname","pid","AgentStub","beforeEach","createSandbox","hasMany","create","stub","withArgs","returns","Promise","resolve","toJSON","findOne","findByUuid","findAll","all","platzi","update","findById","setupDB","afterEach","restore","t","truthy","Agent","serial","true","called","agent","calledOnce","calledWith","deepEqual","createOrUpdate","calledTwice"],"mappings":"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","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst proxyquire = require('proxyquire')\nconst sinon = require('sinon')\nlet sandbox = null\nlet db = null\nlet id = 1\nlet uuid = 'yyy-yyy-yyy'\n\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n  logging: function () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet single = Object.assign({}, agentFixtures.single)\n\nlet connectedArgs = {\n  where: {\n    connected: true\n  }\n}\n\nlet usernameArgs = {\n  where: {\n    username: 'franndy',\n    connected: true\n  }\n}\n\nlet uuidArgs = {\n  where: {\n    uuid\n  }\n}\n\nlet newAgent = {\n  uuid: '123-123-123',\n  name: 'Anuel',\n  username: 'test',\n  hostname: 'nasa',\n  pid: 0,\n  connected: false\n}\nlet AgentStub = null\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n  AgentStub = {\n    hasMany: sinon.spy()\n  }\n\n  // Model create Stub\n  AgentStub.create = sandbox.stub()\n  AgentStub.create.withArgs(newAgent).returns(\n    Promise.resolve({\n      toJSON () {\n        return newAgent\n      }\n    })\n  )\n\n  // Model findOne Stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne\n    .withArgs(uuidArgs)\n    .returns(Promise.resolve(agentFixtures.findByUuid(uuid)))\n\n  // Model findAll Stub\n  AgentStub.findAll = sandbox.stub()\n  AgentStub.findAll.withArgs().returns(Promise.resolve(agentFixtures.all))\n  AgentStub.findAll\n    .withArgs(connectedArgs)\n    .returns(Promise.resolve(agentFixtures.connected))\n  AgentStub.findAll\n    .withArgs(usernameArgs)\n    .returns(Promise.resolve(agentFixtures.platzi))\n\n  // Model Update Stub\n\n  AgentStub.update = sandbox.stub()\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\n\n  // Model findById Stub\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById\n    .withArgs(id)\n    .returns(Promise.resolve(agentFixtures.findById(id)))\n\n  const setupDB = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDB(config)\n})\n\ntest.afterEach(() => {\n  sinon.restore()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentMode.hasMany was executed')\n  t.true(MetricStub.belongsTo.called, 'MetricStub.belongsTo was executed')\n})\n\ntest.serial('Agent#findById', async t => {\n  let agent = await db.Agent.findById(id)\n\n  t.true(AgentStub.findById.called, 'FindbyId should be called')\n  t.true(AgentStub.findById.calledOnce, 'FindByid should be called once')\n  t.true(\n    AgentStub.findById.calledWith(id),\n    'FindById should be called with the specified id'\n  )\n\n  t.deepEqual(agent, agentFixtures.findById(id), 'Should be the same.')\n})\n\ntest.serial('Agent#createOrUpdate -existing obj', async t => {\n  let agent = await db.Agent.createOrUpdate(single)\n\n  t.true(AgentStub.findOne.called, 'findOne should be called')\n  t.true(AgentStub.findOne.calledTwice, 'findOne should be called twice')\n  t.true(AgentStub.findOne.calledWith(uuidArgs), 'findOne should be called')\n\n  t.true(AgentStub.update.called, 'update should be called')\n  t.true(AgentStub.update.calledOnce, 'update should be called once')\n  t.true(\n    AgentStub.update.calledWith(single, uuidArgs),\n    'Update called with specified params'\n  )\n\n  t.deepEqual(agent, single, 'Agent should be the same')\n})\n\ntest.serial('Agent#CreateOrUpdate -new', async t => {\n  let agent = await db.Agent.createOrUpdate(newAgent)\n\n  t.true(AgentStub.findOne.called, 'findOne should be called')\n  t.true(AgentStub.findOne.calledOnce, 'FindOne should be called once')\n  t.true(\n    AgentStub.findOne.calledWith({ where: { uuid: agent.uuid } }),\n    'Find one should be called with uuid args'\n  )\n})\n"]}