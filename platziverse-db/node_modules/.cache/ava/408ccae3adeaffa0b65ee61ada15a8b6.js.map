{"version":3,"sources":["tests/agent-test.js"],"names":["test","require","proxyquire","sinon","db","sandbox","config","logging","MetricStub","belongsTo","spy","AgentStub","beforeEach","create","hasMany","setupDB","afterEach","restore","t","truthy","Agent","console","log","serial","true","called"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIG,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd,C,CAAoB;;AAEpB,IAAIC,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAW,CAAE;AADX,CAAb;AAIA,IAAIC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAAEN,KAAK,CAACO,GAAN;AADI,CAAjB;AAIA,IAAIC,SAAS,GAAG,IAAhB;AAEAX,IAAI,CAACY,UAAL,CAAgB,YAAY;AAC1BP,EAAAA,OAAO,GAAGF,KAAK,CAACE,OAAN,CAAcQ,MAAd,EAAV;AACAF,EAAAA,SAAS,GAAG;AACVG,IAAAA,OAAO,EAAET,OAAO,CAACK,GAAR;AADC,GAAZ;AAIA,QAAMK,OAAO,GAAGb,UAAU,CAAC,KAAD,EAAQ;AAChC,sBAAkB,MAAMS,SADQ;AAEhC,uBAAmB,MAAMH;AAFO,GAAR,CAA1B;AAIAJ,EAAAA,EAAE,GAAG,MAAMW,OAAO,CAACT,MAAD,CAAlB;AACD,CAXD;AAaAN,IAAI,CAACgB,SAAL,CAAe,MAAM;AACnBX,EAAAA,OAAO,IAAIF,KAAK,CAACE,OAAN,CAAcY,OAAd,EAAX;AACD,CAFD;AAIAjB,IAAI,CAAC,OAAD,EAAUkB,CAAC,IAAI;AACjBA,EAAAA,CAAC,CAACC,MAAF,CAASf,EAAE,CAACgB,KAAZ,EAAmB,4BAAnB,EAAiDC,OAAO,CAACC,GAAR,CAAYX,SAAZ,CAAjD;AACD,CAFG,CAAJ;AAIAX,IAAI,CAACuB,MAAL,CAAY,OAAZ,EAAqBL,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACM,IAAF,CAAOb,SAAS,CAACG,OAAV,CAAkBW,MAAzB,EAAiC,gCAAjC;AACAP,EAAAA,CAAC,CAACM,IAAF,CAAOhB,UAAU,CAACC,SAAX,CAAqBgB,MAA5B,EAAoC,mCAApC;AACD,CAHD","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\nlet db = null;\nlet sandbox = null; //Resets the number of time a particular funciton have been called.\n\nlet config = {\n  logging: function() {}\n};\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n};\n\nlet AgentStub = null;\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create();\n  AgentStub = {\n    hasMany: sandbox.spy()\n  };\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/agent\": () => AgentStub,\n    \"./models/metric\": () => MetricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sandbox && sinon.sandbox.restore();\n});\n\ntest(\"Agent\", t => {\n  t.truthy(db.Agent, \"Agent service should exist\", console.log(AgentStub));\n});\n\ntest.serial(\"Setup\", t => {\n  t.true(AgentStub.hasMany.called, \"AgentMode.hasMany was executed\");\n  t.true(MetricStub.belongsTo.called, \"MetricStub.belongsTo was executed\");\n});\n"]}