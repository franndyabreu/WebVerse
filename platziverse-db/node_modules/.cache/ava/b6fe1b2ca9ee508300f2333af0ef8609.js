"use strict";

const test = require("ava");

const proxyquire = require("proxyquire");

const sinon = require("sinon");

let sandbox = null;
let db = null;
let uuidArgs = "xxx";

const metricFixtures = require("./fixtures/metric");

let config = {
  logging: function () {}
};
let MetricStub = null;
let AgentStub = {
  hasMany: sinon.spy()
};
const singleMetric = Object.assign({}, metricFixtures.single); // const newMetric = {
//   id: 1,
//   type: "memory",
//   value: "705",
//   uuid: "xxx",
//   createdAt: new Date(),
//   updatedAt: new Date()
// };

test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  MetricStub = {
    belongsTo: sinon.spy()
  }; //Modell findByAgentUuid stub

  MetricStub.findByAgentUuid = sandbox.stub();
  MetricStub.findByAgentUuid.withArgs(uuidArgs).returns(Promise.resolve(metricFixtures.findByAgentUuid(singleMetric)));
  const setupDB = proxyquire("../", {
    "./models/agent": () => AgentStub,
    "./models/metric": () => MetricStub
  });
  db = await setupDB(config);
});
test.afterEach(() => {
  sinon.restore();
});
test("Metric", t => {
  t.truthy(db.Metric, "Metric service should exist");
});
test.serial("Metric#findByUuid", async t => {
  let metric = await db.Metric.findByAgentUuid(uuidArgs);
  console.log(metric);
  t.deepEqual(metric, metricFixtures.findByUuid(uuidArgs), "Should be the same."); //   t.true(MetricStub.findByAgentUuid.called, "FindByAgentUuid should be called");
});
//# sourceMappingURL=/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db/node_modules/.cache/ava/b6fe1b2ca9ee508300f2333af0ef8609.js.map