{"version":3,"sources":["tests/metric-test.js"],"names":["test","require","proxyquire","sinon","metricFixtures","agentFixtures","singleMetric","Object","assign","single","type","uuidArgs","responseUuid","findByAgentUuid","uuid","typeAgentResponse","findByTypeAgentUuid","sandbox","db","findByAgentUuidArgs","attributes","group","include","model","AgentStub","where","raw","typeAgentUuidArgs","limit","order","config","logging","MetricStub","newMetric","id","value","createdAt","Date","updatedAt","beforeEach","createSandbox","belongsTo","spy","hasMany","findOne","stub","withArgs","returns","Promise","resolve","findByUuid","create","toJSON","findAll","all","setupDB","afterEach","restore","serial","t","true","called","calledOnce","calledWith","truthy","Metric","metric","console","log","deepEqual"],"mappings":"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","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\nconst metricFixtures = require(\"./fixtures/metric\");\nconst agentFixtures = require(\"./fixtures/agent\");\nconst singleMetric = Object.assign({}, metricFixtures.single);\nconst type = \"cpu\";\nlet uuidArgs = \"xxx\";\n\nconst responseUuid = metricFixtures.findByAgentUuid(metricFixtures.single.uuid);\nconst typeAgentResponse = metricFixtures.findByTypeAgentUuid(type, uuidArgs);\n\nlet sandbox = null;\nlet db = null;\n\n// let AgentStub = {\n//   hasMany: sinon.spy()\n// };\nconst findByAgentUuidArgs = {\n  attributes: [\"type\"],\n  group: [\"type\"],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: uuidArgs\n      }\n    }\n  ],\n  raw: true\n};\n\nconst typeAgentUuidArgs = {\n  attributes: [\"id\", \"type\", \"value\", \"createdAt\"],\n  where: {\n    type\n  },\n  limit: 20,\n  order: [[\"createdAt\", \"DESC\"]],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: uuidArgs\n      }\n    }\n  ],\n  raw: true\n};\n\nlet config = {\n  logging: function() {}\n};\n\nlet MetricStub = null;\n\nconst newMetric = {\n  id: 1,\n  type: \"memory\",\n  value: \"705\",\n  uuid: uuidArgs,\n  createdAt: new Date(),\n  updatedAt: new Date()\n};\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  MetricStub = {\n    belongsTo: sandbox.spy()\n  };\n  AgentStub = {\n    hasMany: sandbox.spy()\n  };\n\n  //Model findOne stub Agent\n\n  AgentStub.findOne = sandbox.stub();\n  AgentStub.findOne\n    .withArgs({ where: { uuid: uuidArgs } })\n    .returns(Promise.resolve(agentFixtures.findByUuid(uuidArgs)));\n  //Model CreateMetric stub\n  MetricStub.create = sandbox.stub();\n  MetricStub.create.withArgs(newMetric).returns(\n    Promise.resolve({\n      toJSON() {\n        return newMetric;\n      }\n    })\n  );\n\n  //Model findByTypeAgentUuid stub\n  MetricStub.findByTypeAgentUuid = sandbox.stub();\n  MetricStub.findByTypeAgentUuid\n    .withArgs(typeAgentUuidArgs)\n    .returns(\n      Promise.resolve(metricFixtures.findByTypeAgentUuid(type, uuidArgs))\n    );\n\n  //Modell findByAgentUuid stub\n  MetricStub.findByAgentUuid = sandbox.stub();\n  MetricStub.findByAgentUuid\n    .withArgs(findByAgentUuidArgs)\n    .returns(Promise.resolve(metricFixtures.findByAgentUuid(uuidArgs)));\n\n  // Model findAll Stub\n  MetricStub.findAll = sandbox.stub();\n  MetricStub.findAll.withArgs().returns(Promise.resolve(metricFixtures.all));\n  MetricStub.findAll\n    .withArgs(findByAgentUuidArgs)\n    .returns(Promise.resolve(responseUuid));\n  MetricStub.findAll\n    .withArgs(typeAgentUuidArgs)\n    .returns(Promise.resolve(typeAgentResponse));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/agent\": () => AgentStub,\n    \"./models/metric\": () => MetricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest.serial(\"Setup#Metric\", t => {\n  t.true(AgentStub.hasMany.called, \"Should be called\");\n  t.true(MetricStub.belongsTo.called, \"Should be called\");\n  t.true(AgentStub.hasMany.calledOnce, \"Should be called once\");\n  t.true(MetricStub.belongsTo.calledOnce, \"Should be called once\");\n  t.true(\n    AgentStub.hasMany.calledWith(MetricStub),\n    \"Should be called with MetricModel\"\n  );\n  t.true(\n    MetricStub.belongsTo.calledWith(AgentStub),\n    \"Should be called with AgentModel\"\n  );\n});\n\ntest(\"Metric\", t => {\n  t.truthy(db.Metric, \"Metric service should exist\");\n});\n\ntest.serial(\"Metric#create -existing\", async t => {\n  let metric = await db.Metric.create(uuidArgs, newMetric);\n  console.log(metric);\n  t.true(AgentStub.findOne.called, \"FindOne called\");\n  // t.true(MetricStub.create.called, \"Should be called\");\n  // t.true(MetricStub.create.calledOnce, \"Should be called once\");\n  // t.true(\n  //   MetricStub.create.calledWith(newMetric),\n  //   \"Should be called with new metric\"\n  // );\n  t.deepEqual(metric, newMetric, \"Response and single should be the same\");\n\n  // t.true(\n  //   AgentStub.findOne.calledWith(uuidArgs),\n  //   \"FindOne called with specified args\"\n  // );\n});\ntest.serial(\"Metric#findByUuid\", async t => {\n  let metric = await db.Metric.findByAgentUuid(uuidArgs);\n  t.true(MetricStub.findAll.called, \"findAll called\");\n  t.true(MetricStub.findAll.calledOnce, \"findAll called Once\");\n  // t.true(MetricStub.findByAgentUuid.called, \"FindbyAgentUuid should be called\");\n  // t.true(\n  //   MetricStub.findByAgentUuid.calledOnce,\n  //   \"findByAgentUuid should be called Once\"\n  // );\n  // t.true(\n  //   MetricStub.findByAgentUuid.calledWith(uuidArgs),\n  //   \"findByAgentUuid should be called with specified params\"\n  // );\n\n  t.deepEqual(\n    metric,\n    metricFixtures.findByAgentUuid(uuidArgs),\n    \"Should be the same.\"\n  );\n  //   t.true(MetricStub.findByAgentUuid.called, \"FindByAgentUuid should be called\");\n});\n\ntest.serial(\"Metric#FindByTypeAgentUuid\", async t => {\n  let metric = await db.Metric.findByTypeAgentUuid(type, uuidArgs);\n  t.true(MetricStub.findAll.called, \"findAll called\");\n  t.true(MetricStub.findAll.calledOnce, \"findAll called Once\");\n\n  t.deepEqual(metric, metricFixtures.findByTypeAgentUuid(type, uuidArgs));\n});\n"]}