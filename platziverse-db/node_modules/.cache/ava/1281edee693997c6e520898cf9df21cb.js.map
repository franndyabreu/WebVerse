{"version":3,"sources":["tests/metric-test.js"],"names":["test","require","proxyquire","sinon","sandbox","db","uuidArgs","metricFixtures","config","logging","metricStub","singleMetric","Object","assign","single","newMetric","id","type","value","uuid","beforeEach","createSandbox","belongsTo","spy","findByAgentUuid","stub","withArgs","returns","Promise","resolve","findByTypeAgentUuid","setupDB","afterEach","restore","t","truthy","Metric"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAIG,OAAO,GAAG,IAAd;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,QAAQ,GAAG,KAAf;;AAEA,MAAMC,cAAc,GAAGN,OAAO,CAAC,mBAAD,CAA9B;;AAEA,IAAIO,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAW,CAAE;AADX,CAAb;AAIA,IAAIC,UAAU,GAAG,IAAjB;AAEA,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,cAAc,CAACO,MAAjC,CAArB;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,EAAE,EAAE,EADY;AAEhBC,EAAAA,IAAI,EAAE,QAFU;AAGhBC,EAAAA,KAAK,EAAE,GAHS;AAIhBC,EAAAA,IAAI,EAAE;AAJU,CAAlB;AAOAnB,IAAI,CAACoB,UAAL,CAAgB,YAAY;AAC1BhB,EAAAA,OAAO,GAAGD,KAAK,CAACkB,aAAN,EAAV;AACAX,EAAAA,UAAU,GAAG;AACXY,IAAAA,SAAS,EAAEnB,KAAK,CAACoB,GAAN;AADA,GAAb;AAIAb,EAAAA,UAAU,CAACc,eAAX,GAA6BpB,OAAO,CAACqB,IAAR,EAA7B;AACAf,EAAAA,UAAU,CAACc,eAAX,CACGE,QADH,CACYpB,QADZ,EAEGqB,OAFH,CAEWC,OAAO,CAACC,OAAR,CAAgBtB,cAAc,CAACuB,mBAAf,CAAmCnB,YAAnC,CAAhB,CAFX;AAIA,QAAMoB,OAAO,GAAG7B,UAAU,CAAC,KAAD,EAAQ;AAChC,uBAAmB,MAAMQ;AADO,GAAR,CAA1B;AAGAL,EAAAA,EAAE,GAAG,MAAM0B,OAAO,CAACvB,MAAD,CAAlB;AACD,CAfD;AAiBAR,IAAI,CAACgC,SAAL,CAAe,MAAM;AACnB7B,EAAAA,KAAK,CAAC8B,OAAN;AACD,CAFD;AAIAjC,IAAI,CAAC,QAAD,EAAWkC,CAAC,IAAI;AAClBA,EAAAA,CAAC,CAACC,MAAF,CAAS9B,EAAE,CAAC+B,MAAZ,EAAoB,4BAApB;AACD,CAFG,CAAJ,C,CAGA;AACA;AACA","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\n\nlet sandbox = null;\nlet db = null;\nlet uuidArgs = \"xxx\";\n\nconst metricFixtures = require(\"./fixtures/metric\");\n\nlet config = {\n  logging: function() {}\n};\n\nlet metricStub = null;\n\nconst singleMetric = Object.assign({}, metricFixtures.single);\n\nconst newMetric = {\n  id: 30,\n  type: \"memory\",\n  value: 300,\n  uuid: \"TTT-TTT-TTT\"\n};\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  metricStub = {\n    belongsTo: sinon.spy()\n  };\n\n  metricStub.findByAgentUuid = sandbox.stub();\n  metricStub.findByAgentUuid\n    .withArgs(uuidArgs)\n    .returns(Promise.resolve(metricFixtures.findByTypeAgentUuid(singleMetric)));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/metric\": () => metricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest(\"Metric\", t => {\n  t.truthy(db.Metric, \"Agent service should exist\");\n});\n// test.serial(\"Metric#findByAgentUuid\", async t => {\n//   t.true(metricStub.findByAgentUuid.called, \"FindByAgentUuid should be called\");\n// });\n"]}