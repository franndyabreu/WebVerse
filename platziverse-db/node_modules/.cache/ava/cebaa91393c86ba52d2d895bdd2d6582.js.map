{"version":3,"sources":["tests/agent-test.js"],"names":["test","require","proxyquire","sinon","sandbox","db","id","uuid","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","uuidArgs","where","AgentStub","beforeEach","createSandbox","hasMany","findOne","stub","withArgs","returns","Promise","resolve","findByUuid","update","findById","setupDB","afterEach","restore","t","truthy","Agent","serial","true","called","agent","calledOnce","calledWith","deepEqual","createOrUpdate"],"mappings":"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","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\nlet sandbox = null;\nlet db = null;\nlet id = 1;\nlet uuid = \"yyy-yyy-yyy\";\n\nconst agentFixtures = require(\"./fixtures/agent\");\n\nlet config = {\n  logging: function() {}\n};\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n};\n\nlet single = Object.assign({}, agentFixtures.single);\nlet uuidArgs = {\n  where: {\n    uuid\n  }\n};\nlet AgentStub = null;\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  AgentStub = {\n    hasMany: sinon.spy()\n  };\n\n  //Model findOne Stub\n  AgentStub.findOne = sandbox.stub();\n  AgentStub.findOne\n    .withArgs(uuidArgs)\n    .returns(Promise.resolve(agentFixtures.findByUuid(uuid)));\n\n  //Model Update Stub\n\n  AgentStub.update = sandbox.stub();\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single));\n\n  //Model findById Stub\n  AgentStub.findById = sandbox.stub();\n  AgentStub.findById\n    .withArgs(id)\n    .returns(Promise.resolve(agentFixtures.findById(id)));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/agent\": () => AgentStub,\n    \"./models/metric\": () => MetricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest(\"Agent\", t => {\n  t.truthy(db.Agent, \"Agent service should exist\");\n});\n\ntest.serial(\"Setup\", t => {\n  t.true(AgentStub.hasMany.called, \"AgentMode.hasMany was executed\");\n  t.true(MetricStub.belongsTo.called, \"MetricStub.belongsTo was executed\");\n});\n\ntest.serial(\"Agent#findById\", async t => {\n  let agent = await db.Agent.findById(id);\n\n  t.true(AgentStub.findById.called, \"FindbyId should be called\");\n  t.true(AgentStub.findById.calledOnce, \"FindByid should be called once\");\n  t.true(\n    AgentStub.findById.calledWith(id),\n    \"FindById should be called with the specified id\"\n  );\n\n  t.deepEqual(agent, agentFixtures.findById(id), \"Should be the same.\");\n});\n\ntest.serial(\"Agent#createOrUpdate -existing obj\", async t => {\n  let agent = await db.Agent.createOrUpdate(single);\n\n  t.deepEqual(agent, single, \"Agent should be the same\");\n});\n"]}