"use strict";

const test = require("ava");

const proxyquire = require("proxyquire");

const sinon = require("sinon");

let sandbox = null;
let db = null;
let id = 1;

const agentFixtures = require("./fixtures/agent");

let config = {
  logging: function () {}
};
let MetricStub = {
  belongsTo: sinon.spy()
};
let single = Object.assign({}, agentFixtures.single);
let AgentStub = null;
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  AgentStub = {
    hasMany: sinon.spy()
  }; //Model findById Stub

  AgentStub.findById = sandbox.stub();
  const setupDB = proxyquire("../", {
    "./models/agent": () => AgentStub,
    "./models/metric": () => MetricStub
  });
  db = await setupDB(config);
});
test.afterEach(() => {
  sinon.restore();
});
test("Agent", t => {
  t.truthy(db.Agent, "Agent service should exist");
});
test.serial("Setup", t => {
  t.true(AgentStub.hasMany.called, "AgentMode.hasMany was executed");
  t.true(MetricStub.belongsTo.called, "MetricStub.belongsTo was executed");
});
test.serial("Agent#findById", async t => {
  let agent = await db.Agent.findById(id);
  t.deepEqual(agent, agentFixtures.findById(id), "Should be the same.");
});
//# sourceMappingURL=/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db/node_modules/.cache/ava/8ddb5211b6c13444aa761c44e2cdc3cc.js.map