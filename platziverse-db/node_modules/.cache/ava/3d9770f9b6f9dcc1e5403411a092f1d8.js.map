{"version":3,"sources":["tests/metric-test.js"],"names":["test","require","proxyquire","sinon","sandbox","db","uuidArgs","metricFixtures","config","logging","MetricStub","AgentStub","hasMany","spy","singleMetric","Object","assign","single","beforeEach","createSandbox","belongsTo","findAll","stub","withArgs","returns","Promise","resolve","all","findByAgentUuid","setupDB","afterEach","restore","t","truthy","Metric","serial","metric","console","log","deepEqual"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAIG,OAAO,GAAG,IAAd;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,QAAQ,GAAG,KAAf;;AAEA,MAAMC,cAAc,GAAGN,OAAO,CAAC,mBAAD,CAA9B;;AAEA,IAAIO,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAW,CAAE;AADX,CAAb;AAIA,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAET,KAAK,CAACU,GAAN;AADK,CAAhB;AAIA,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,cAAc,CAACU,MAAjC,CAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAjB,IAAI,CAACkB,UAAL,CAAgB,YAAY;AAC1Bd,EAAAA,OAAO,GAAGD,KAAK,CAACgB,aAAN,EAAV;AACAT,EAAAA,UAAU,GAAG;AACXU,IAAAA,SAAS,EAAEjB,KAAK,CAACU,GAAN;AADA,GAAb,CAF0B,CAM1B;;AACAH,EAAAA,UAAU,CAACW,OAAX,GAAqBjB,OAAO,CAACkB,IAAR,EAArB;AACAZ,EAAAA,UAAU,CAACW,OAAX,CAAmBE,QAAnB,GAA8BC,OAA9B,CAAsCC,OAAO,CAACC,OAAR,CAAgBnB,cAAc,CAACoB,GAA/B,CAAtC,EAR0B,CAU1B;;AACAjB,EAAAA,UAAU,CAACkB,eAAX,GAA6BxB,OAAO,CAACkB,IAAR,EAA7B;AACAZ,EAAAA,UAAU,CAACkB,eAAX,CACGL,QADH,CACYjB,QADZ,EAEGkB,OAFH,CAEWC,OAAO,CAACC,OAAR,CAAgBnB,cAAc,CAACqB,eAAf,CAA+BtB,QAA/B,CAAhB,CAFX;AAIA,QAAMuB,OAAO,GAAG3B,UAAU,CAAC,KAAD,EAAQ;AAChC,sBAAkB,MAAMS,SADQ;AAEhC,uBAAmB,MAAMD;AAFO,GAAR,CAA1B;AAIAL,EAAAA,EAAE,GAAG,MAAMwB,OAAO,CAACrB,MAAD,CAAlB;AACD,CArBD;AAuBAR,IAAI,CAAC8B,SAAL,CAAe,MAAM;AACnB3B,EAAAA,KAAK,CAAC4B,OAAN;AACD,CAFD;AAIA/B,IAAI,CAAC,QAAD,EAAWgC,CAAC,IAAI;AAClBA,EAAAA,CAAC,CAACC,MAAF,CAAS5B,EAAE,CAAC6B,MAAZ,EAAoB,6BAApB;AACD,CAFG,CAAJ;AAGAlC,IAAI,CAACmC,MAAL,CAAY,mBAAZ,EAAiC,MAAMH,CAAN,IAAW;AAC1C,MAAII,MAAM,GAAG,MAAM/B,EAAE,CAAC6B,MAAH,CAAUN,eAAV,CAA0BtB,QAA1B,CAAnB;AACA+B,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAEAJ,EAAAA,CAAC,CAACO,SAAF,CACEH,MADF,EAEE7B,cAAc,CAACqB,eAAf,CAA+BtB,QAA/B,CAFF,EAGE,qBAHF,EAJ0C,CAS1C;AACD,CAVD","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\n\nlet sandbox = null;\nlet db = null;\nlet uuidArgs = \"xxx\";\n\nconst metricFixtures = require(\"./fixtures/metric\");\n\nlet config = {\n  logging: function() {}\n};\n\nlet MetricStub = null;\nlet AgentStub = {\n  hasMany: sinon.spy()\n};\n\nconst singleMetric = Object.assign({}, metricFixtures.single);\n\n// const newMetric = {\n//   id: 1,\n//   type: \"memory\",\n//   value: \"705\",\n//   uuid: \"xxx\",\n//   createdAt: new Date(),\n//   updatedAt: new Date()\n// };\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  MetricStub = {\n    belongsTo: sinon.spy()\n  };\n\n  // Model findAll Stub\n  MetricStub.findAll = sandbox.stub();\n  MetricStub.findAll.withArgs().returns(Promise.resolve(metricFixtures.all));\n\n  //Modell findByAgentUuid stub\n  MetricStub.findByAgentUuid = sandbox.stub();\n  MetricStub.findByAgentUuid\n    .withArgs(uuidArgs)\n    .returns(Promise.resolve(metricFixtures.findByAgentUuid(uuidArgs)));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/agent\": () => AgentStub,\n    \"./models/metric\": () => MetricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest(\"Metric\", t => {\n  t.truthy(db.Metric, \"Metric service should exist\");\n});\ntest.serial(\"Metric#findByUuid\", async t => {\n  let metric = await db.Metric.findByAgentUuid(uuidArgs);\n  console.log(metric);\n\n  t.deepEqual(\n    metric,\n    metricFixtures.findByAgentUuid(uuidArgs),\n    \"Should be the same.\"\n  );\n  //   t.true(MetricStub.findByAgentUuid.called, \"FindByAgentUuid should be called\");\n});\n"]}