{"version":3,"sources":["tests/agent-test.js"],"names":["test","require","proxyquire","sinon","sandbox","db","id","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","AgentStub","beforeEach","createSandbox","hasMany","findById","stub","withArgs","returns","Promise","resolve","setupDB","afterEach","restore","t","truthy","Agent","serial","true","called","agent","deepEqual"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AACA,IAAIG,OAAO,GAAG,IAAd;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,EAAE,GAAG,CAAT;;AAEA,MAAMC,aAAa,GAAGN,OAAO,CAAC,kBAAD,CAA7B;;AAEA,IAAIO,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAW,CAAE;AADX,CAAb;AAIA,IAAIC,UAAU,GAAG;AACfC,EAAAA,SAAS,EAAER,KAAK,CAACS,GAAN;AADI,CAAjB;AAIA,IAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,aAAa,CAACM,MAAhC,CAAb;AACA,IAAIG,SAAS,GAAG,IAAhB;AAEAhB,IAAI,CAACiB,UAAL,CAAgB,YAAY;AAC1Bb,EAAAA,OAAO,GAAGD,KAAK,CAACe,aAAN,EAAV;AACAF,EAAAA,SAAS,GAAG;AACVG,IAAAA,OAAO,EAAEhB,KAAK,CAACS,GAAN;AADC,GAAZ,CAF0B,CAM1B;;AACAI,EAAAA,SAAS,CAACI,QAAV,GAAqBhB,OAAO,CAACiB,IAAR,EAArB;AACAL,EAAAA,SAAS,CAACI,QAAV,CACGE,QADH,CACYhB,EADZ,EAEGiB,OAFH,CAEWC,OAAO,CAACC,OAAR,CAAgBlB,aAAa,CAACa,QAAd,CAAuBd,EAAvB,CAAhB,CAFX;AAIA,QAAMoB,OAAO,GAAGxB,UAAU,CAAC,KAAD,EAAQ;AAChC,sBAAkB,MAAMc,SADQ;AAEhC,uBAAmB,MAAMN;AAFO,GAAR,CAA1B;AAIAL,EAAAA,EAAE,GAAG,MAAMqB,OAAO,CAAClB,MAAD,CAAlB;AACD,CAjBD;AAmBAR,IAAI,CAAC2B,SAAL,CAAe,MAAM;AACnBxB,EAAAA,KAAK,CAACyB,OAAN;AACD,CAFD;AAIA5B,IAAI,CAAC,OAAD,EAAU6B,CAAC,IAAI;AACjBA,EAAAA,CAAC,CAACC,MAAF,CAASzB,EAAE,CAAC0B,KAAZ,EAAmB,4BAAnB;AACD,CAFG,CAAJ;AAIA/B,IAAI,CAACgC,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACI,IAAF,CAAOjB,SAAS,CAACG,OAAV,CAAkBe,MAAzB,EAAiC,gCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOvB,UAAU,CAACC,SAAX,CAAqBuB,MAA5B,EAAoC,mCAApC;AACD,CAHD;AAKAlC,IAAI,CAACgC,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AACvC,MAAIM,KAAK,GAAG,MAAM9B,EAAE,CAAC0B,KAAH,CAASX,QAAT,CAAkBd,EAAlB,CAAlB;AAEAuB,EAAAA,CAAC,CAACO,SAAF,CAAYD,KAAZ,EAAmB5B,aAAa,CAACa,QAAd,CAAuBd,EAAvB,CAAnB,EAA+C,qBAA/C;AACD,CAJD","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\nlet sandbox = null;\nlet db = null;\nlet id = 1;\n\nconst agentFixtures = require(\"./fixtures/agent\");\n\nlet config = {\n  logging: function() {}\n};\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n};\n\nlet single = Object.assign({}, agentFixtures.single);\nlet AgentStub = null;\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  AgentStub = {\n    hasMany: sinon.spy()\n  };\n\n  //Model findById Stub\n  AgentStub.findById = sandbox.stub();\n  AgentStub.findById\n    .withArgs(id)\n    .returns(Promise.resolve(agentFixtures.findById(id)));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/agent\": () => AgentStub,\n    \"./models/metric\": () => MetricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest(\"Agent\", t => {\n  t.truthy(db.Agent, \"Agent service should exist\");\n});\n\ntest.serial(\"Setup\", t => {\n  t.true(AgentStub.hasMany.called, \"AgentMode.hasMany was executed\");\n  t.true(MetricStub.belongsTo.called, \"MetricStub.belongsTo was executed\");\n});\n\ntest.serial(\"Agent#findById\", async t => {\n  let agent = await db.Agent.findById(id);\n\n  t.deepEqual(agent, agentFixtures.findById(id), \"Should be the same.\");\n});\n"]}