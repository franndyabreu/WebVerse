{"version":3,"sources":["tests/metric-test.js"],"names":["test","require","proxyquire","sinon","metricFixtures","singleMetric","Object","assign","single","type","uuidArgs","uuid","responseUuid","findByAgentUuid","typeAgentResponse","findByTypeAgentUuid","sandbox","db","AgentStub","hasMany","spy","findByAgentUuidArgs","attributes","group","include","model","where","raw","typeAgentUuidArgs","limit","order","config","logging","MetricStub","newMetric","id","value","beforeEach","createSandbox","belongsTo","create","stub","withArgs","returns","Promise","resolve","toJSON","findAll","all","setupDB","afterEach","restore","t","truthy","Metric","serial","metric","true","findOne","called","calledOnce","deepEqual"],"mappings":"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","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\nconst metricFixtures = require(\"./fixtures/metric\");\nconst singleMetric = Object.assign({}, metricFixtures.single);\nconst type = \"cpu\";\nlet uuidArgs = singleMetric.uuid;\n\nconst responseUuid = metricFixtures.findByAgentUuid(metricFixtures.single.uuid);\nconst typeAgentResponse = metricFixtures.findByTypeAgentUuid(type, uuidArgs);\n\nlet sandbox = null;\nlet db = null;\n\nlet AgentStub = {\n  hasMany: sinon.spy()\n};\nconst findByAgentUuidArgs = {\n  attributes: [\"type\"],\n  group: [\"type\"],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: uuidArgs\n      }\n    }\n  ],\n  raw: true\n};\n\nconst typeAgentUuidArgs = {\n  attributes: [\"id\", \"type\", \"value\", \"createdAt\"],\n  where: {\n    type\n  },\n  limit: 20,\n  order: [[\"createdAt\", \"DESC\"]],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: uuidArgs\n      }\n    }\n  ],\n  raw: true\n};\n\nlet config = {\n  logging: function() {}\n};\n\nlet MetricStub = null;\nlet newMetric = {\n  id: 7,\n  type: \"cpu\",\n  value: \"250\",\n  uuid: uuidArgs\n};\n\n// const newMetric = {\n//   id: 1,\n//   type: \"memory\",\n//   value: \"705\",\n//   uuid: \"xxx\",\n//   createdAt: new Date(),\n//   updatedAt: new Date()\n// };\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  MetricStub = {\n    belongsTo: sinon.spy()\n  };\n  AgentStub = {\n    hasMany: sinon.spy()\n  };\n\n  //Model CreateMetric stub\n  MetricStub.create = sandbox.stub();\n  MetricStub.create.withArgs(newMetric).returns(\n    Promise.resolve({\n      toJSON() {\n        return newMetric;\n      }\n    })\n  );\n\n  //Model findByTypeAgentUuid stub\n  MetricStub.findByTypeAgentUuid = sandbox.stub();\n  MetricStub.findByTypeAgentUuid\n    .withArgs(typeAgentUuidArgs)\n    .returns(\n      Promise.resolve(metricFixtures.findByTypeAgentUuid(type, uuidArgs))\n    );\n\n  //Modell findByAgentUuid stub\n  MetricStub.findByAgentUuid = sandbox.stub();\n  MetricStub.findByAgentUuid\n    .withArgs(findByAgentUuidArgs)\n    .returns(Promise.resolve(metricFixtures.findByAgentUuid(uuidArgs)));\n\n  // Model findAll Stub\n  MetricStub.findAll = sandbox.stub();\n  MetricStub.findAll.withArgs().returns(Promise.resolve(metricFixtures.all));\n  MetricStub.findAll\n    .withArgs(findByAgentUuidArgs)\n    .returns(Promise.resolve(responseUuid));\n  MetricStub.findAll\n    .withArgs(typeAgentUuidArgs)\n    .returns(Promise.resolve(typeAgentResponse));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/agent\": () => AgentStub,\n    \"./models/metric\": () => MetricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest(\"Metric\", t => {\n  t.truthy(db.Metric, \"Metric service should exist\");\n});\n\ntest.serial(\"Metric#create -existing\", async t => {\n  let metric = await db.Metric.create(uuidArgs, newMetric);\n  t.true(AgentStub.findOne.called, \"FindOne called\");\n  t.true(AgentStub.findOne.calledOnce, \"FindOne called once\");\n  // t.true(\n  //   AgentStub.findOne.calledWith(uuidArgs),\n  //   \"FindOne called with specified args\"\n  // );\n});\ntest.serial(\"Metric#findByUuid\", async t => {\n  let metric = await db.Metric.findByAgentUuid(uuidArgs);\n  t.true(MetricStub.findAll.called, \"findAll called\");\n  t.true(MetricStub.findAll.calledOnce, \"findAll called Once\");\n  // t.true(MetricStub.findByAgentUuid.called, \"FindbyAgentUuid should be called\");\n  // t.true(\n  //   MetricStub.findByAgentUuid.calledOnce,\n  //   \"findByAgentUuid should be called Once\"\n  // );\n  // t.true(\n  //   MetricStub.findByAgentUuid.calledWith(uuidArgs),\n  //   \"findByAgentUuid should be called with specified params\"\n  // );\n\n  t.deepEqual(\n    metric,\n    metricFixtures.findByAgentUuid(uuidArgs),\n    \"Should be the same.\"\n  );\n  //   t.true(MetricStub.findByAgentUuid.called, \"FindByAgentUuid should be called\");\n});\n\ntest.serial(\"Metric#FindByTypeAgentUuid\", async t => {\n  let metric = await db.Metric.findByTypeAgentUuid(type, uuidArgs);\n  t.true(MetricStub.findAll.called, \"findAll called\");\n  t.true(MetricStub.findAll.calledOnce, \"findAll called Once\");\n\n  t.deepEqual(metric, metricFixtures.findByTypeAgentUuid(type, uuidArgs));\n});\n"]}