{"version":3,"sources":["tests/metric-test.js"],"names":["test","require","proxyquire","sinon","sandbox","db","uuidArgs","findByAgentUuidArgs","attributes","group","include","model","AgentStub","where","uuid","single","raw","metricFixtures","config","logging","MetricStub","hasMany","spy","singleMetric","Object","assign","beforeEach","createSandbox","belongsTo","findAll","stub","withArgs","returns","Promise","resolve","all","findByAgentUuid","setupDB","afterEach","restore","t","truthy","Metric","serial","metric","f","console","log","deepEqual"],"mappings":"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","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\n\nlet sandbox = null;\nlet db = null;\nlet uuidArgs = \"xxx\";\n\nconst findByAgentUuidArgs = {\n  attributes: [\"type\"],\n  group: [\"type\"],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: single.uuid\n      }\n    }\n  ],\n  raw: true\n};\n\nconst metricFixtures = require(\"./fixtures/metric\");\n\nlet config = {\n  logging: function() {}\n};\n\nlet MetricStub = null;\nlet AgentStub = {\n  hasMany: sinon.spy()\n};\n\nconst singleMetric = Object.assign({}, metricFixtures.single);\n\n// const newMetric = {\n//   id: 1,\n//   type: \"memory\",\n//   value: \"705\",\n//   uuid: \"xxx\",\n//   createdAt: new Date(),\n//   updatedAt: new Date()\n// };\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  MetricStub = {\n    belongsTo: sinon.spy()\n  };\n\n  // Model findAll Stub\n  MetricStub.findAll = sandbox.stub();\n  MetricStub.findAll.withArgs().returns(Promise.resolve(metricFixtures.all));\n\n  //Modell findByAgentUuid stub\n  MetricStub.findByAgentUuid = sandbox.stub();\n  MetricStub.findByAgentUuid\n    .withArgs(findByAgentUuidArgs)\n    .returns(Promise.resolve(metricFixtures.findByAgentUuid(uuidArgs)));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/agent\": () => AgentStub,\n    \"./models/metric\": () => MetricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest(\"Metric\", t => {\n  t.truthy(db.Metric, \"Metric service should exist\");\n});\ntest.serial(\"Metric#findByUuid\", async t => {\n  let metric = await db.Metric.findByAgentUuid(f);\n  console.log(metric);\n\n  t.deepEqual(\n    metric,\n    metricFixtures.findByAgentUuid(uuidArgs),\n    \"Should be the same.\"\n  );\n  //   t.true(MetricStub.findByAgentUuid.called, \"FindByAgentUuid should be called\");\n});\n"]}