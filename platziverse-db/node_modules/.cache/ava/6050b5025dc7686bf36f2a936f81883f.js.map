{"version":3,"sources":["tests/metric-test.js"],"names":["test","require","proxyquire","sinon","metricFixtures","singleMetric","Object","assign","single","type","uuidArgs","uuid","responseUuid","findByAgentUuid","typeAgentResponse","findByTypeAgentUuid","sandbox","db","WhereArgs","where","AgentStub","hasMany","spy","findOne","findByAgentUuidArgs","attributes","group","include","model","raw","typeAgentUuidArgs","limit","order","config","logging","MetricStub","newMetric","id","value","createdAt","Date","updatedAt","beforeEach","createSandbox","belongsTo","create","stub","findAll","withArgs","returns","Promise","resolve","toJSON","all","setupDB","afterEach","restore","serial","t","true","called","calledOnce","calledWith","truthy","Metric","metric","deepEqual"],"mappings":"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","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\nconst metricFixtures = require(\"./fixtures/metric\");\nconst singleMetric = Object.assign({}, metricFixtures.single);\nconst type = \"cpu\";\nlet uuidArgs = singleMetric.uuid;\n\nconst responseUuid = metricFixtures.findByAgentUuid(metricFixtures.single.uuid);\nconst typeAgentResponse = metricFixtures.findByTypeAgentUuid(type, uuidArgs);\n\nlet sandbox = null;\nlet db = null;\n\nlet WhereArgs = { where: { uuidArgs } };\n\nlet AgentStub = {\n  hasMany: sinon.spy(),\n  findOne: sinon.spy()\n};\nconst findByAgentUuidArgs = {\n  attributes: [\"type\"],\n  group: [\"type\"],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: uuidArgs\n      }\n    }\n  ],\n  raw: true\n};\n\nconst typeAgentUuidArgs = {\n  attributes: [\"id\", \"type\", \"value\", \"createdAt\"],\n  where: {\n    type\n  },\n  limit: 20,\n  order: [[\"createdAt\", \"DESC\"]],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: uuidArgs\n      }\n    }\n  ],\n  raw: true\n};\n\nlet config = {\n  logging: function() {}\n};\n\nlet MetricStub = null;\n\nconst newMetric = {\n  id: 1,\n  type: \"memory\",\n  value: \"705\",\n  uuid: \"xxx\",\n  createdAt: new Date(),\n  updatedAt: new Date()\n};\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  MetricStub = {\n    belongsTo: sandbox.spy(),\n    create: sinon.stub(),\n    findAll: sinon.stub()\n  };\n\n  //Model CreateMetric stub\n  MetricStub.create = sandbox.stub();\n  MetricStub.create.withArgs(newMetric).returns(\n    Promise.resolve({\n      toJSON() {\n        return newMetric;\n      }\n    })\n  );\n\n  //Model findByTypeAgentUuid stub\n  MetricStub.findByTypeAgentUuid = sandbox.stub();\n  MetricStub.findByTypeAgentUuid\n    .withArgs(typeAgentUuidArgs)\n    .returns(\n      Promise.resolve(metricFixtures.findByTypeAgentUuid(type, uuidArgs))\n    );\n\n  //Modell findByAgentUuid stub\n  MetricStub.findByAgentUuid = sandbox.stub();\n  MetricStub.findByAgentUuid\n    .withArgs(findByAgentUuidArgs)\n    .returns(Promise.resolve(metricFixtures.findByAgentUuid(uuidArgs)));\n\n  // Model findAll Stub\n  MetricStub.findAll = sandbox.stub();\n  MetricStub.findAll.withArgs().returns(Promise.resolve(metricFixtures.all));\n  MetricStub.findAll\n    .withArgs(findByAgentUuidArgs)\n    .returns(Promise.resolve(responseUuid));\n  MetricStub.findAll\n    .withArgs(typeAgentUuidArgs)\n    .returns(Promise.resolve(typeAgentResponse));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/agent\": () => AgentStub,\n    \"./models/metric\": () => MetricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest.serial(\"Setup#Metric\", t => {\n  t.true(AgentStub.hasMany.called, \"Should be called\");\n  t.true(MetricStub.belongsTo.called, \"Should be called\");\n  t.true(AgentStub.hasMany.calledOnce, \"Should be called once\");\n  t.true(MetricStub.belongsTo.calledOnce, \"Should be called once\");\n  t.true(\n    AgentStub.hasMany.calledWith(MetricStub),\n    \"Should be called with MetricModel\"\n  );\n  t.true(\n    MetricStub.belongsTo.calledWith(AgentStub),\n    \"Should be called with AgentModel\"\n  );\n});\n\ntest(\"Metric\", t => {\n  t.truthy(db.Metric, \"Metric service should exist\");\n});\n\ntest.serial(\"Metric#create -existing\", async t => {\n  let metric = await db.Metric.create(uuidArgs, newMetric);\n  t.true(AgentStub.findOne.called, \"FindOne called\");\n  t.true(MetricStub.create.called, \"Should be called\");\n  t.true(MetricStub.create.calledOnce, \"Should be called once\");\n  t.true(\n    MetricStub.create.calledWith(newMetric),\n    \"Should be called with new metric\"\n  );\n  t.deepEqual(metric, newMetric, \"Response and single should be the same\");\n\n  // t.true(\n  //   AgentStub.findOne.calledWith(uuidArgs),\n  //   \"FindOne called with specified args\"\n  // );\n});\ntest.serial(\"Metric#findByUuid\", async t => {\n  let metric = await db.Metric.findByAgentUuid(uuidArgs);\n  t.true(MetricStub.findAll.called, \"findAll called\");\n  t.true(MetricStub.findAll.calledOnce, \"findAll called Once\");\n  // t.true(MetricStub.findByAgentUuid.called, \"FindbyAgentUuid should be called\");\n  // t.true(\n  //   MetricStub.findByAgentUuid.calledOnce,\n  //   \"findByAgentUuid should be called Once\"\n  // );\n  // t.true(\n  //   MetricStub.findByAgentUuid.calledWith(uuidArgs),\n  //   \"findByAgentUuid should be called with specified params\"\n  // );\n\n  t.deepEqual(\n    metric,\n    metricFixtures.findByAgentUuid(uuidArgs),\n    \"Should be the same.\"\n  );\n  //   t.true(MetricStub.findByAgentUuid.called, \"FindByAgentUuid should be called\");\n});\n\ntest.serial(\"Metric#FindByTypeAgentUuid\", async t => {\n  let metric = await db.Metric.findByTypeAgentUuid(type, uuidArgs);\n  t.true(MetricStub.findAll.called, \"findAll called\");\n  t.true(MetricStub.findAll.calledOnce, \"findAll called Once\");\n\n  t.deepEqual(metric, metricFixtures.findByTypeAgentUuid(type, uuidArgs));\n});\n"]}