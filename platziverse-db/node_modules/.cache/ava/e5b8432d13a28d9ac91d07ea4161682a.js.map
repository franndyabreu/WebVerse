{"version":3,"sources":["tests/metric-test.js"],"names":["test","require","proxyquire","sinon","metricFixtures","responseUuid","metricFixture","byUuid","uuid","sandbox","db","singleMetric","Object","assign","single","uuidArgs","AgentStub","hasMany","spy","findByAgentUuidArgs","attributes","group","include","model","where","raw","config","logging","MetricStub","beforeEach","createSandbox","belongsTo","findByAgentUuid","stub","withArgs","returns","Promise","resolve","findAll","all","setupDB","afterEach","restore","t","truthy","Metric","serial","metric","deepEqual"],"mappings":"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","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\nconst metricFixtures = require(\"./fixtures/metric\");\nconst responseUuid = metricFixture.byUuid(uuid);\n\nlet sandbox = null;\nlet db = null;\n\nconst singleMetric = Object.assign({}, metricFixtures.single);\nlet uuidArgs = singleMetric.uuid;\n\nlet AgentStub = {\n  hasMany: sinon.spy()\n};\n\nconst findByAgentUuidArgs = {\n  attributes: [\"type\"],\n  group: [\"type\"],\n  include: [\n    {\n      attributes: [],\n      model: AgentStub,\n      where: {\n        uuid: singleMetric.uuid\n      }\n    }\n  ],\n  raw: true\n};\n\nlet config = {\n  logging: function() {}\n};\n\nlet MetricStub = null;\n\n// const newMetric = {\n//   id: 1,\n//   type: \"memory\",\n//   value: \"705\",\n//   uuid: \"xxx\",\n//   createdAt: new Date(),\n//   updatedAt: new Date()\n// };\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  MetricStub = {\n    belongsTo: sinon.spy()\n  };\n\n  //Modell findByAgentUuid stub\n  MetricStub.findByAgentUuid = sandbox.stub();\n  MetricStub.findByAgentUuid\n    .withArgs(findByAgentUuidArgs)\n    .returns(Promise.resolve(metricFixtures.findByAgentUuid(uuidArgs)));\n\n  // Model findAll Stub\n  MetricStub.findAll = sandbox.stub();\n  MetricStub.findAll.withArgs().returns(Promise.resolve(metricFixtures.all));\n  MetricStub.findAll\n    .withArgs(findByAgentUuidArgs)\n    .returns(Promise.resolve(responseUuid));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/agent\": () => AgentStub,\n    \"./models/metric\": () => MetricStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest(\"Metric\", t => {\n  t.truthy(db.Metric, \"Metric service should exist\");\n});\ntest.serial(\"Metric#findByUuid\", async t => {\n  let metric = await db.Metric.findByAgentUuid(findByAgentUuidArgs);\n\n  t.deepEqual(\n    metric,\n    metricFixtures.findByAgentUuid(uuidArgs),\n    \"Should be the same.\"\n  );\n  //   t.true(MetricStub.findByAgentUuid.called, \"FindByAgentUuid should be called\");\n});\n"]}