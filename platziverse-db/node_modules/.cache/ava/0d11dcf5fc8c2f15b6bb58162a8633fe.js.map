{"version":3,"sources":["tests/metric-test.js"],"names":["test","require","proxyquire","sinon","sandbox","db","uuidArgs","metricFixtures","config","logging","metricStub","agentStub","hasMany","spy","singleMetric","Object","assign","single","beforeEach","createSandbox","belongsTo","findByAgentUuid","stub","withArgs","returns","Promise","resolve","findByTypeAgentUuid","setupDB","afterEach","restore","t","truthy","Metric","serial","metric","deepEqual","findByUuid"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAIG,OAAO,GAAG,IAAd;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,QAAQ,GAAG,KAAf;;AAEA,MAAMC,cAAc,GAAGN,OAAO,CAAC,mBAAD,CAA9B;;AAEA,IAAIO,MAAM,GAAG;AACXC,EAAAA,OAAO,EAAE,YAAW,CAAE;AADX,CAAb;AAIA,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,SAAS,GAAG;AACdC,EAAAA,OAAO,EAAET,KAAK,CAACU,GAAN;AADK,CAAhB;AAIA,MAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,cAAc,CAACU,MAAjC,CAArB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAjB,IAAI,CAACkB,UAAL,CAAgB,YAAY;AAC1Bd,EAAAA,OAAO,GAAGD,KAAK,CAACgB,aAAN,EAAV;AACAT,EAAAA,UAAU,GAAG;AACXU,IAAAA,SAAS,EAAEjB,KAAK,CAACU,GAAN;AADA,GAAb;AAIAH,EAAAA,UAAU,CAACW,eAAX,GAA6BjB,OAAO,CAACkB,IAAR,EAA7B;AACAZ,EAAAA,UAAU,CAACW,eAAX,CACGE,QADH,CACYjB,QADZ,EAEGkB,OAFH,CAEWC,OAAO,CAACC,OAAR,CAAgBnB,cAAc,CAACoB,mBAAf,CAAmCb,YAAnC,CAAhB,CAFX;AAIA,QAAMc,OAAO,GAAG1B,UAAU,CAAC,KAAD,EAAQ;AAChC,uBAAmB,MAAMQ,UADO;AAEhC,sBAAkB,MAAMC;AAFQ,GAAR,CAA1B;AAIAN,EAAAA,EAAE,GAAG,MAAMuB,OAAO,CAACpB,MAAD,CAAlB;AACD,CAhBD;AAkBAR,IAAI,CAAC6B,SAAL,CAAe,MAAM;AACnB1B,EAAAA,KAAK,CAAC2B,OAAN;AACD,CAFD;AAIA9B,IAAI,CAAC,QAAD,EAAW+B,CAAC,IAAI;AAClBA,EAAAA,CAAC,CAACC,MAAF,CAAS3B,EAAE,CAAC4B,MAAZ,EAAoB,6BAApB;AACD,CAFG,CAAJ;AAGAjC,IAAI,CAACkC,MAAL,CAAY,mBAAZ,EAAiC,MAAMH,CAAN,IAAW;AAC1C,MAAII,MAAM,GAAG,MAAM9B,EAAE,CAAC4B,MAAH,CAAUZ,eAAV,CAA0Bf,QAA1B,CAAnB;AACAyB,EAAAA,CAAC,CAACK,SAAF,CACED,MADF,EAEE5B,cAAc,CAAC8B,UAAf,CAA0B/B,QAA1B,CAFF,EAGE,qBAHF,EAF0C,CAQ1C;AACD,CATD","sourceRoot":"/Users/franndyabreu/Desktop/Platzi-Verse/platziverse-db","sourcesContent":["\"use strict\";\n\nconst test = require(\"ava\");\nconst proxyquire = require(\"proxyquire\");\nconst sinon = require(\"sinon\");\n\nlet sandbox = null;\nlet db = null;\nlet uuidArgs = \"xxx\";\n\nconst metricFixtures = require(\"./fixtures/metric\");\n\nlet config = {\n  logging: function() {}\n};\n\nlet metricStub = null;\nlet agentStub = {\n  hasMany: sinon.spy()\n};\n\nconst singleMetric = Object.assign({}, metricFixtures.single);\n\n// const newMetric = {\n//   id: 1,\n//   type: \"memory\",\n//   value: \"705\",\n//   uuid: \"xxx\",\n//   createdAt: new Date(),\n//   updatedAt: new Date()\n// };\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox();\n  metricStub = {\n    belongsTo: sinon.spy()\n  };\n\n  metricStub.findByAgentUuid = sandbox.stub();\n  metricStub.findByAgentUuid\n    .withArgs(uuidArgs)\n    .returns(Promise.resolve(metricFixtures.findByTypeAgentUuid(singleMetric)));\n\n  const setupDB = proxyquire(\"../\", {\n    \"./models/metric\": () => metricStub,\n    \"./models/agent\": () => agentStub\n  });\n  db = await setupDB(config);\n});\n\ntest.afterEach(() => {\n  sinon.restore();\n});\n\ntest(\"Metric\", t => {\n  t.truthy(db.Metric, \"Metric service should exist\");\n});\ntest.serial(\"Metric#findByUuid\", async t => {\n  let metric = await db.Metric.findByAgentUuid(uuidArgs);\n  t.deepEqual(\n    metric,\n    metricFixtures.findByUuid(uuidArgs),\n    \"Should be the same.\"\n  );\n\n  //   t.true(metricStub.findByAgentUuid.called, \"FindByAgentUuid should be called\");\n});\n"]}